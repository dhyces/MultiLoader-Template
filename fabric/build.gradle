import org.groovymc.modsdotgroovy.gradle.tasks.AbstractGatherPlatformDetailsTask

plugins {
    id 'idea'
    id 'maven-publish'
    id "consumer.conventions"
    alias(libs.plugins.archloom)
    alias(libs.plugins.mdg)
    alias(libs.plugins.curseforgegradle)
    alias(libs.plugins.minotaur)
}

base {
    archivesName = "${mod_name}-fabric-${libs.versions.minecraft.release.get()}"
}

modsDotGroovy {
    platform(org.groovymc.modsdotgroovy.types.core.Platform.FABRIC)
    inferGather.set(false)
    multiplatform {
        from(":common")
    }
    apply()
}

tasks.named("gatherFabricPlatformDetails", AbstractGatherPlatformDetailsTask).configure {
    minecraftVersion = libs.versions.minecraft.release
    platformVersion = libs.versions.fabric.loader
}

loom {
    if (Boolean.parseBoolean(at_enabled)) {
        accessWidenerPath = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    }

    if (Boolean.parseBoolean(common_mixin_enabled) || Boolean.parseBoolean(fabric_mixin_enabled)) {
        mixin {
            defaultRefmapName = "${mod_id}.refmap.json"
        }
    }

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("run")
        }
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }
    }
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.release.get()}@zip")
    }
    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api
}

if (hasProperty("modrinth_write_version_pat")) {
    modrinth {
        token = findProperty("modrinth_write_version_pat") as String
        projectId = properties["modrinth_project_id"] as String
        versionName = "Fabric-${libs.versions.minecraft.release.get()}-${properties["mod_version"]}"
        versionNumber = "${libs.versions.minecraft.release.get()}-${properties["mod_version"]}+fabric"
        versionType = properties["publish_type"] as String
        uploadFile.set(tasks.remapJar)
        gameVersions = List.of(libs.versions.publish.range.get().split(","))
        loaders = List.of("fabric")
        changelog = rootProject.file("changelog.md").text
        additionalFiles = List.of(tasks.named("sourcesJar"), tasks.named("javadocJar"))
        detectLoaders = false
        debugMode = properties["publish_debug"].toString().toBoolean()
    }
}

if (hasProperty("curseforge_publishing_token")) {
    tasks.register("curseforge", net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        group = "publishing"

        disableVersionDetection()
        apiToken = findProperty("curseforge_publishing_token")
        def projectId = properties["curseforge_project_id"]
        def mainFile = upload(projectId, tasks.remapJar)
        mainFile.displayName = "Fabric-${libs.versions.minecraft.release.get()}-${properties["mod_version"]}"
        mainFile.releaseType = properties["publish_type"]
        mainFile.changelog = rootProject.file("changelog.md").text
        mainFile.changelogType = "markdown"
        mainFile.addModLoader("Fabric")
        mainFile.addJavaVersion("Java ${java.toolchain.languageVersion.get()}")
        mainFile.addGameVersion(libs.versions.minecraft.release.get())
        debugMode = properties["publish_debug"].toString().toBoolean()

        dependsOn(tasks.remapJar)
    }
}